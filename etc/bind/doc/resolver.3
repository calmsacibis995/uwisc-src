.\" Copyright (c) 1985 Regents of the University of California.
.\" All rights reserved.  The Berkeley software License Agreement
.\" specifies the terms and conditions for redistribution.
.\"
.\"	@(#)resolver.3	1.7 (Berkeley) 5/27/86
.\"
.TH RESOLVER 3 "15 November 1985"
.UC 4
.SH NAME
res_mkquery, res_send, res_init, dn_comp, dn_expand \- resolver routines
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <netinet/in.h>
.br
.B #include <arpa/nameser.h>
.br
.B #include <resolv.h>
.PP
.B "res_mkquery(op, dname, class, type, data, datalen, newrr, buf, buflen)"
.br
.B int op;
.br
.B char *dname;
.br
.B int class, type;
.br
.B char *data;
.br
.B int datalen;
.br
.B struct rrec *newrr;
.br
.B char *buf;
.br
.B int buflen;
.PP
.B res_send(msg, msglen, answer, anslen)
.br
.B char *msg;
.br
.B int msglen;
.br
.B char *answer;
.br
.B int anslen;
.PP
.B res_init()
.PP
.B dn_comp(exp_dn, comp_dn, length, dnptrs, lastdnptr)
.br
.B char *exp_dn, *comp_dn;
.br
.B int length;
.br
.B char **dnptrs, **lastdnptr;
.PP
.B dn_expand(msg, eomorig, comp_dn, exp_dn, length)
.br
.B char *msg, *eomorig, *comp_dn, exp_dn;
.br
.B int  length;
.SH DESCRIPTION
These routines are used for making, sending and interpreting packets to
Internet domain name servers. Global information that is used by the
resolver routines is kept in the variable
.IR _res .
Most of the values have reasonable defaults and can be ignored. Options
stored in
.I _res.options
are defined in
.I resolv.h
and are as follows. Options are a simple bit mask and are or'ed in to
enable.
.IP RES_INIT
True if the initial name server address and default domain name are
initialized (i.e.,
.I res_init
has been called).
.IP RES_DEBUG
Print debugging messages.
.IP RES_AAONLY
Accept authoritative answers only.
.I Res_send
will continue until it finds an authoritative answer or finds an error.
Currently this is not implemented.
.IP RES_USEVC
Use TCP connections for queries instead of UDP.
.IP RES_STAYOPEN
Used with RES_USEVC to keep the TCP connection open between
queries.
This is useful only in programs that regularly do many queries.
UDP should be the normal mode used.
.IP RES_IGNTC
Unused currently (ignore truncation errors, i.e., don't retry with TCP).
.IP RES_RECURSE
Set the recursion desired bit in queries. This is the default.
(
.I res_send
does not do iterative queries and expects the name server
to handle recursion.)
.IP RES_DEFNAMES
Append the default domain name to single label queries. This is the default.
.PP
.I Res_init
.PP
reads the initialization file to get the default
domain name and the Internet address of the initial hosts
running the name server. If this line does not exist, the host running
the resolver is tried.
.I Res_mkquery
makes a standard query message and places it in
.IR buf .
.I Res_mkquery
will return the size of the query or \-1 if the query is
larger than
.IR buflen .
.I Op
is usually QUERY but can be any of the query types defined in
.IR nameser.h .
.I Dname
is the domain name. If
.I dname
consists of a single label and the RES_DEFNAMES flag is enabled
(the default),
.I dname
will be appended with the current domain name. The current
domain name is defined in a system file and can be overridden
by the environment variable LOCALDOMAIN.
.I Newrr
is currently unused but is intended for making update messages.
.PP
.I Res_send
sends a query to name servers and returns an answer.
It will call
.I res_init
if RES_INIT is not set, send the query to the local name server, and
handle timeouts and retries. The length of the message is returned or
\-1 if there were errors.
.PP
.I Dn_expand
expands the compressed domain name
.I comp_dn
to a full domain name.  Expanded names are converted to upper case.
.I Msg
is a pointer to the beginning of the message,
.I exp_dn
is a pointer to a buffer of size
.I length
for the result.
The size of compressed name is returned or -1 if there was an error.
.PP
.I Dn_comp
compresses the domain name
.I exp_dn
and stores it in
.IR comp_dn .
The size of the compressed name is returned or -1 if there were errors.
.I length is the size of the array pointed to by
.IR comp_dn .
.I Dnptrs
is a list of pointers to previously compressed names in the current message.
The first pointer points to
to the beginning of the message and the list ends with NULL.
.I lastdnptr
is a pointer to the end of the array pointed to
.IR dnptrs .
A side effect is to update the list of pointers for
labels inserted into the message by
.I dn_comp
as the name is compressed.
If
.I dnptr
is NULL, we don't try to compress names. If
.I lastdnptr
is NULL, we don't update the list.
.SH FILES
/etc/resolv.conf see resolver(5)
.SH "SEE ALSO"
named(8), resolver(5), RFC882, RFC883, RFC973, RFC974,
SMM:11 Name Server Operations Guide for BIND
