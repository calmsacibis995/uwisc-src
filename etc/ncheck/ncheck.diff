*** ncheck.c	Mon Sep 15 15:01:12 1986
--- /usr/staff/tadl/nfs/usr.etc/ncheck.c	Sun May 18 18:58:22 1986
***************
*** 1,29 ****
--- 1,19 ----
-</*
-< * Copyright (c) 1980 Regents of the University of California.
-< * All rights reserved.  The Berkeley software License Agreement
-< * specifies the terms and conditions for redistribution.
-< */
-<
  #ifndef lint
!<char copyright[] =
!<"@(#) Copyright (c) 1980 Regents of the University of California.\n\
!< All rights reserved.\n";
!<#endif not lint
!<
!<#ifndef lint
!<static char sccsid[] = "@(#)ncheck.c	5.4 (Berkeley) 1/9/86";
!<#endif not lint
!<
  /*
   * ncheck -- obtain file names from reading filesystem
   */
  
  #define	NB		500
  #define	MAXNINDIR	(MAXBSIZE / sizeof (daddr_t))
  
  #include <sys/param.h>
!<#include <sys/inode.h>
!<#include <sys/fs.h>
  #include <sys/dir.h>
  #include <stdio.h>
  
---------------
  #ifndef lint
!>static	char *sccsid = "@(#)ncheck.c 1.1 85/05/31 SMI"; /* from UCB 2.4 09/22/83  */
!>#endif
  /*
   * ncheck -- obtain file names from reading filesystem
   */
  
  #define	NB		500
+>#define	HSIZE		22637
  #define	MAXNINDIR	(MAXBSIZE / sizeof (daddr_t))
  
  #include <sys/param.h>
!>#include <sys/time.h>
!>#include <sys/vnode.h>
!>#include <ufs/inode.h>
!>#include <ufs/fs.h>
  #include <sys/dir.h>
  #include <stdio.h>
  
***************
*** 41,49 ****
--- 31,38 ----
  	ino_t	h_ino;
  	ino_t	h_pino;
  	char	*h_name;
!<} *htab;
!<char *strngtab;
!<long hsize;
  int strngloc;
  
  struct dirstuff {
---------------
  	ino_t	h_ino;
  	ino_t	h_pino;
  	char	*h_name;
!>} htab[HSIZE];
!>char strngtab[30 * HSIZE];
  int strngloc;
  
  struct dirstuff {
***************
*** 84,89 ****
--- 73,80 ----
---------------
  
  		case 'i':
  			for(iflg=0; iflg<NB; iflg++) {
+>				if (argv[1] == 0)
+>					break;
  				n = atol(argv[1]);
  				if(n == 0)
  					break;
***************
*** 132,145 ****
--- 123,128 ----
  		nerror++;
  		return;
  	}
-<	hsize = sblock.fs_ipg * sblock.fs_ncg - sblock.fs_cstotal.cs_nifree + 1;
-<	htab = (struct htab *)malloc(hsize * sizeof(struct htab));
-<	strngtab = (char *)malloc(30 * hsize);
-<	if (htab == 0 || strngtab == 0) {
-<		printf("not enough memory to allocate tables\n");
-<		nerror++;
-<		return;
-<	}
  	ino = 0;
  	for (c = 0; c < sblock.fs_ncg; c++) {
  		bread(fsbtodb(&sblock, cgimin(&sblock, c)), (char *)itab,
---------------
  	ino = 0;
  	for (c = 0; c < sblock.fs_ncg; c++) {
  		bread(fsbtodb(&sblock, cgimin(&sblock, c)), (char *)itab,
***************
*** 172,178 ****
--- 155,161 ----
  		}
  	}
  	close(fi);
!<	for (i = 0; i < hsize; i++)
  		htab[i].h_ino = 0;
  	for (i = iflg; i < NB; i++)
  		ilist[i].ino = 0;
---------------
  		}
  	}
  	close(fi);
!>	for (i = 0; i < HSIZE; i++)
  		htab[i].h_ino = 0;
  	for (i = iflg; i < NB; i++)
  		ilist[i].ino = 0;
***************
*** 281,288 ****
--- 264,270 ----
  	for(;;) {
  		if (dirp->loc >= dirp->ip->di_size)
  			return NULL;
!<		if (blkoff(&sblock, dirp->loc) == 0) {
!<			lbn = lblkno(&sblock, dirp->loc);
  			d = bmap(lbn);
  			if(d == 0)
  				return NULL;
---------------
  	for(;;) {
  		if (dirp->loc >= dirp->ip->di_size)
  			return NULL;
!>		if ((lbn = lblkno(&sblock, dirp->loc)) == 0) {
  			d = bmap(lbn);
  			if(d == 0)
  				return NULL;
***************
*** 336,351 ****
--- 318,333 ----
  {
  	register struct htab *hp;
  
!<	for (hp = &htab[i%hsize]; hp->h_ino;) {
  		if (hp->h_ino==i)
  			return(hp);
!<		if (++hp >= &htab[hsize])
  			hp = htab;
  	}
  	if (ef==0)
  		return(0);
!<	if (++nhent >= hsize) {
!<		fprintf(stderr, "ncheck: hsize of %d is too small\n", hsize);
  		exit(1);
  	}
  	hp->h_ino = i;
---------------
  {
  	register struct htab *hp;
  
!>	for (hp = &htab[i%HSIZE]; hp->h_ino;) {
  		if (hp->h_ino==i)
  			return(hp);
!>		if (++hp >= &htab[HSIZE])
  			hp = htab;
  	}
  	if (ef==0)
  		return(0);
!>	if (++nhent >= HSIZE) {
!>		fprintf(stderr, "ncheck: out of core-- increase HSIZE\n");
  		exit(1);
  	}
  	hp->h_ino = i;
