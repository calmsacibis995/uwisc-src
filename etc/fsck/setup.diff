*** setup.c	Tue Nov 11 21:48:31 1986
--- /tmp/fsck/setup.c	Wed Nov 12 01:24:13 1986
***************
*** 5,24 ****
   */
  
  #ifndef lint
! static char sccsid[] = "@(#)setup.c	5.3 (Berkeley) 5/15/86";
  #endif not lint
  
  #include <sys/param.h>
! #ifdef VFS
  #include <sys/time.h>
  #include <sys/vnode.h>
  #include <ufs/inode.h>
  #include <ufs/fs.h>
- #else
- #include <sys/inode.h>
- #include <sys/fs.h>
- #endif VFS
- #include <sys/stat.h>
  #include "fsck.h"
  
  char	*calloc();
--- 5,19 ----
   */
  
  #ifndef lint
! static char sccsid[] = "@(#)setup.c	5.2 (Berkeley) 9/11/85";
  #endif not lint
  
  #include <sys/param.h>
! #include <sys/stat.h>
  #include <sys/time.h>
  #include <sys/vnode.h>
  #include <ufs/inode.h>
  #include <ufs/fs.h>
  #include "fsck.h"
  
  char	*calloc();
***************
*** 95,118 ****
  	if (sblock.fs_sbsize > SBSIZE)
  		{ badsb("SIZE PREPOSTEROUSLY LARGE"); return (0); }
  	/*
- 	 * Check and potentially fix certain fields in the super block.
- 	 */
- 	if (sblock.fs_optim != FS_OPTTIME && sblock.fs_optim != FS_OPTSPACE) {
- 		pfatal("UNDEFINED OPTIMIZATION IN SUPERBLOCK");
- 		if (reply("SET TO DEFAULT") == 1) {
- 			sblock.fs_optim = FS_OPTTIME;
- 			sbdirty();
- 		}
- 	}
- 	if ((sblock.fs_minfree < 0 || sblock.fs_minfree > 99)) {
- 		pfatal("IMPOSSIBLE MINFREE=%d IN SUPERBLOCK",
- 			sblock.fs_minfree);
- 		if (reply("SET TO DEFAULT") == 1) {
- 			sblock.fs_minfree = 10;
- 			sbdirty();
- 		}
- 	}
- 	/*
  	 * Set all possible fields that could differ, then do check
  	 * of whole super block against an alternate super block.
  	 * When an alternate super-block is specified this check is skipped.
--- 90,95 ----
***************
*** 133,139 ****
--- 110,118 ----
  	altsblock.fs_flags = sblock.fs_flags;
  	altsblock.fs_maxcontig = sblock.fs_maxcontig;
  	altsblock.fs_minfree = sblock.fs_minfree;
+ #ifdef	notdef
  	altsblock.fs_optim = sblock.fs_optim;
+ #endif	notdef
  	altsblock.fs_rotdelay = sblock.fs_rotdelay;
  	altsblock.fs_maxbpg = sblock.fs_maxbpg;
  	bcopy((char *)sblock.fs_csp, (char *)altsblock.fs_csp,
