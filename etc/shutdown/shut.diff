*** shutdown.c	Thu Oct 23 20:27:19 1986
--- /usr/staff/tadl/nfs/etc/shutdown.c	Sun May 18 18:37:29 1986
***************
*** 1,29 ****
--- 1,24 ----
-</*
-< * Copyright (c) 1983,1986 Regents of the University of California.
-< * All rights reserved.  The Berkeley software License Agreement
-< * specifies the terms and conditions for redistribution.
-< */
-<
  #ifndef lint
!<char copyright[] =
!<"@(#) Copyright (c) 1983,1986 Regents of the University of California.\n\
!< All rights reserved.\n";
!<#endif not lint
  
-<#ifndef lint
-<static char sccsid[] = "@(#)shutdown.c	5.6 (Berkeley) 5/26/86";
-<#endif not lint
-<
  #include <stdio.h>
  #include <ctype.h>
  #include <signal.h>
  #include <setjmp.h>
  #include <utmp.h>
-<#include <pwd.h>
  #include <sys/time.h>
  #include <sys/resource.h>
!<#include <sys/param.h>
!<#include <sys/syslog.h>
  
  /*
   *	/etc/shutdown when [messages]
---------------
  #ifndef lint
!>/* @(#)shutdown.c	2.1 86/04/17 NFSSRC */ 
!>static	char *sccsid = "@(#)shutdown.c 1.1 86/02/03 SMI"; /* from UCB 4.20 02/02/84 */
!>#endif
  
  #include <stdio.h>
  #include <ctype.h>
  #include <signal.h>
  #include <setjmp.h>
  #include <utmp.h>
  #include <sys/time.h>
  #include <sys/resource.h>
!>#include <sys/types.h>
!>#include <sys/errno.h>
!>#include <rpc/rpc.h>
!>#include <rpc/pmap_clnt.h>
!>#include <nfs/nfs.h>
!>#include <rpcsvc/mount.h>
!>#include <rpcsvc/rwall.h>
!>#include <sys/socket.h>
!>#include <netdb.h>
  
  /*
   *	/etc/shutdown when [messages]
***************
*** 33,39 ****
--- 28,38 ----
   *	and shut it down automatically
   *	and even reboot or halt the machine if they desire
   */
!<
  #define	REBOOT	"/etc/reboot"
  #define	HALT	"/etc/halt"
  #define MAXINTS 20
---------------
   *	and shut it down automatically
   *	and even reboot or halt the machine if they desire
   */
!>#ifdef DEBUG
!>#define LOGFILE "shutdown.log"
!>#else
!>#define LOGFILE "/usr/adm/shutdownlog"
!>#endif
  #define	REBOOT	"/etc/reboot"
  #define	HALT	"/etc/halt"
  #define MAXINTS 20
***************
*** 40,62 ****
--- 39,62 ----
  #define	HOURS	*3600
  #define MINUTES	*60
  #define SECONDS
!<#define NLOG		600		/* no of bytes possible for message */
  #define	NOLOGTIME	5 MINUTES
  #define IGNOREUSER	"sleeper"
  
!<char	hostname[MAXHOSTNAMELEN];
  
  int	timeout();
  time_t	getsdt();
  
  extern	char *ctime();
  extern	struct tm *localtime();
-<extern	long time();
  
-<extern	char *strcpy();
-<extern	char *strncat();
-<extern	off_t lseek();
-<
  struct	utmp utmp;
  int	sint;
  int	stogo;
---------------
  #define	HOURS	*3600
  #define MINUTES	*60
  #define SECONDS
!>#define NLOG		20		/* no of args possible for message */
  #define	NOLOGTIME	5 MINUTES
  #define IGNOREUSER	"sleeper"
  
!>struct hostlist {
!>    char *host;
!>    struct hostlist *nxt;
!>} *hostlist;
  
+>char	hostname[32];
+>char	buf[BUFSIZ];
+>
  int	timeout();
  time_t	getsdt();
  
  extern	char *ctime();
  extern	struct tm *localtime();
  
  struct	utmp utmp;
  int	sint;
  int	stogo;
***************
*** 63,83 ****
--- 63,78 ----
  char	tpath[] =	"/dev/";
  int	nlflag = 1;		/* nolog yet to be done */
  int	killflg = 1;
!<int	doreboot = 0;
  int	halt = 0;
-<int     fast = 0;
-<char    *nosync = NULL;
-<char    nosyncflag[] = "-n";
  char	term[sizeof tpath + sizeof utmp.ut_line];
  char	tbuf[BUFSIZ];
  char	nolog1[] = "\n\nNO LOGINS: System going down at %5.5s\n\n";
!<char	nolog2[NLOG+1];
  #ifdef	DEBUG
  char	nologin[] = "nologin";
-<char    fastboot[] = "fastboot";
  #else
  char	nologin[] = "/etc/nologin";
-<char	fastboot[] = "/fastboot";
  #endif
  time_t	nowtime;
  jmp_buf	alarmbuf;
---------------
  char	tpath[] =	"/dev/";
  int	nlflag = 1;		/* nolog yet to be done */
  int	killflg = 1;
!>int	reboot = 0;
  int	halt = 0;
  char	term[sizeof tpath + sizeof utmp.ut_line];
  char	tbuf[BUFSIZ];
  char	nolog1[] = "\n\nNO LOGINS: System going down at %5.5s\n\n";
!>char	*nolog2[NLOG+1];
  #ifdef	DEBUG
  char	nologin[] = "nologin";
  #else
  char	nologin[] = "/etc/nologin";
  #endif
  time_t	nowtime;
  jmp_buf	alarmbuf;
***************
*** 105,127 ****
--- 100,117 ----
  	char **argv;
  {
  	register i, ufd;
!<	register char *f;
  	char *ts;
  	time_t sdt;
  	int h, m;
  	int first;
  	FILE *termf;
!<	struct passwd *pw, *getpwuid();
!<	extern char *strcat();
!<	extern uid_t geteuid();
  
  	shutter = getlogin();
!<	if (shutter == 0 && (pw = getpwuid(getuid())))
!<		shutter = pw->pw_name;
!<	if (shutter == 0)
!<		shutter = "???";
!<	(void) gethostname(hostname, sizeof (hostname));
!<	openlog("shutdown", 0, LOG_AUTH);
  	argc--, argv++;
  	while (argc > 0 && (f = argv[0], *f++ == '-')) {
  		while (i = *f++) switch (i) {
---------------
  	char **argv;
  {
  	register i, ufd;
!>	register char **mess, *f;
  	char *ts;
  	time_t sdt;
  	int h, m;
  	int first;
  	FILE *termf;
!>	char *name;
!>	struct hostlist *hl;
  
+>	name = argv[0];
  	shutter = getlogin();
!>	gethostname(hostname, sizeof (hostname));
  	argc--, argv++;
  	while (argc > 0 && (f = argv[0], *f++ == '-')) {
  		while (i = *f++) switch (i) {
***************
*** 128,141 ****
--- 118,125 ----
  		case 'k':
  			killflg = 0;
  			continue;
-<		case 'n':
-<			nosync = nosyncflag;
-<			continue;
-<		case 'f':
-<			fast = 1;
-<			continue;
  		case 'r':
!<			doreboot = 1;
  			continue;
  		case 'h':
  			halt = 1;
---------------
  		case 'k':
  			killflg = 0;
  			continue;
  		case 'r':
!>			reboot = 1;
  			continue;
  		case 'h':
  			halt = 1;
***************
*** 147,172 ****
--- 131,152 ----
  		argc--, argv++;
  	}
  	if (argc < 1) {
!<	        /* argv[0] is not available after the argument handling. */
!<		printf("Usage: shutdown [ -krhfn ] shutdowntime [ message ]\n");
  		finish();
  	}
-<	if (fast && (nosync == nosyncflag)) {
-<	        printf ("shutdown: Incompatible switches 'fast' & 'nosync'\n");
-<		finish();
-<	}
  	if (geteuid()) {
  		fprintf(stderr, "NOT super-user\n");
  		finish();
  	}
!<	nowtime = time((long *)0);
  	sdt = getsdt(argv[0]);
  	argc--, argv++;
!<	nolog2[0] = '\0';
!<	while (argc-- > 0) {
!<		(void) strcat(nolog2, " ");
!<		(void) strcat(nolog2, *argv++);
!<	}
  	m = ((stogo = sdt - nowtime) + 30)/60;
  	h = m/60; 
  	m %= 60;
---------------
  		argc--, argv++;
  	}
  	if (argc < 1) {
!>		printf("Usage: %s [ -krh ] shutdowntime [ message ]\n", name);
  		finish();
  	}
  	if (geteuid()) {
  		fprintf(stderr, "NOT super-user\n");
  		finish();
  	}
!>	gethostlist();
!>	nowtime = time((time_t *)0);
  	sdt = getsdt(argv[0]);
  	argc--, argv++;
!>	i = 0;
!>	while (argc-- > 0)
!>		if (i < NLOG)
!>			nolog2[i++] = *argv++;
!>	nolog2[i] = NULL;
  	m = ((stogo = sdt - nowtime) + 30)/60;
  	h = m/60; 
  	m %= 60;
***************
*** 176,190 ****
--- 156,170 ----
  		printf("%d hour%s ", h, h != 1 ? "s" : "");
  	printf("%d minute%s) ", m, m != 1 ? "s" : "");
  #ifndef DEBUG
!<	(void) signal(SIGHUP, SIG_IGN);
!<	(void) signal(SIGQUIT, SIG_IGN);
!<	(void) signal(SIGINT, SIG_IGN);
  #endif
!<	(void) signal(SIGTTOU, SIG_IGN);
!<	(void) signal(SIGTERM, finish);
!<	(void) signal(SIGALRM, timeout);
!<	(void) setpriority(PRIO_PROCESS, 0, PRIO_MIN);
!<	(void) fflush(stdout);
  #ifndef DEBUG
  	if (i = fork()) {
  		printf("[pid %d]\n", i);
---------------
  		printf("%d hour%s ", h, h != 1 ? "s" : "");
  	printf("%d minute%s) ", m, m != 1 ? "s" : "");
  #ifndef DEBUG
!>	signal(SIGHUP, SIG_IGN);
!>	signal(SIGQUIT, SIG_IGN);
!>	signal(SIGINT, SIG_IGN);
  #endif
!>	signal(SIGTTOU, SIG_IGN);
!>	signal(SIGTERM, finish);
!>	signal(SIGALRM, timeout);
!>	setpriority(PRIO_PROCESS, 0, PRIO_MIN);
!>	fflush(stdout);
  #ifndef DEBUG
  	if (i = fork()) {
  		printf("[pid %d]\n", i);
***************
*** 191,197 ****
--- 171,177 ----
  		exit(0);
  	}
  #else
!<	(void) putc('\n', stdout);
  #endif
  	sint = 1 HOURS;
  	f = "";
---------------
  		exit(0);
  	}
  #else
!>	putc('\n', stdout);
  #endif
  	sint = 1 HOURS;
  	f = "";
***************
*** 212,227 ****
--- 192,212 ----
  		}
  		if (sint >= stogo || sint == 0)
  			f = "FINAL ";
!<		nowtime = time((long *)0);
!<		(void) lseek(ufd, 0L, 0);
!<		while (read(ufd,(char *)&utmp,sizeof utmp)==sizeof utmp)
  		if (utmp.ut_name[0] &&
  		    strncmp(utmp.ut_name, IGNOREUSER, sizeof(utmp.ut_name))) {
  			if (setjmp(alarmbuf))
  				continue;
!<			(void) strcpy(term, tpath);
!<			(void) strncat(term, utmp.ut_line, sizeof utmp.ut_line);
!<			(void) alarm(3);
  #ifdef DEBUG
  			if ((termf = stdout) != NULL)
  #else
---------------
  		}
  		if (sint >= stogo || sint == 0)
  			f = "FINAL ";
!>		nowtime = time((time_t *) 0);
!>		lseek(ufd, 0L, 0);
!>		while (read(ufd,&utmp,sizeof utmp)==sizeof utmp)
  		if (utmp.ut_name[0] &&
  		    strncmp(utmp.ut_name, IGNOREUSER, sizeof(utmp.ut_name))) {
+>			/* 
+>			 * don't write to pty's unless they are rlogin sessions
+>			 */
+>			if (nonuser(utmp))
+>				continue;
  			if (setjmp(alarmbuf))
  				continue;
!>			strcpy(term, tpath);
!>			strncat(term, utmp.ut_line, sizeof utmp.ut_line);
!>			alarm(3);
  #ifdef DEBUG
  			if ((termf = stdout) != NULL)
  #else
***************
*** 228,289 ****
--- 213,279 ----
  			if ((termf = fopen(term, "w")) != NULL)
  #endif
  			{
!<				(void) alarm(0);
  				setbuf(termf, tbuf);
  				fprintf(termf, "\n\r\n");
  				warn(termf, sdt, nowtime, f);
  				if (first || sdt - nowtime > 1 MINUTES) {
  					if (*nolog2)
!<						fprintf(termf, "\t...%s", nolog2);
  				}
!<				(void) fputc('\r', termf);
!<				(void) fputc('\n', termf);
!<				(void) alarm(5);
  #ifdef DEBUG
!<				(void) fflush(termf);
  #else
!<				(void) fclose(termf);
  #endif
!<				(void) alarm(0);
  			}
  		}
  		if (stogo <= 0) {
  			printf("\n\007\007System shutdown time has arrived\007\007\n");
!<			syslog(LOG_CRIT, "%s by %s: %s",
!<			    doreboot ? "reboot" : halt ? "halt" : "shutdown",
!<			    shutter, nolog2);
!<			sleep(2);
!<			(void) unlink(nologin);
  			if (!killflg) {
  				printf("but you'll have to do it yourself\n");
  				finish();
  			}
-<			if (fast)
-<				doitfast();
  #ifndef DEBUG
!<			if (doreboot)
!<				execle(REBOOT, "reboot", "-l", nosync, 0, 0);
  			if (halt)
!<				execle(HALT, "halt", "-l", nosync, 0, 0);
!<			(void) kill(1, SIGTERM);	/* to single user */
  #else
!<			if (doreboot)
!<				printf("REBOOT");
!<			if (halt)
!<				printf(" HALT");
!<			if (fast)
!<				printf(" -l %s (without fsck's)\n", nosync);
!<			else
!<				printf(" -l %s\n", nosync);
!<			else
!<				printf("kill -HUP 1\n");
!<
  #endif
  			finish();
  		}
!<		stogo = sdt - time((long *) 0);
  		if (stogo > 0 && sint > 0)
!<			sleep((unsigned)(sint<stogo ? sint : stogo));
  		stogo -= sint;
  		first = 0;
  	}
---------------
  			if ((termf = fopen(term, "w")) != NULL)
  #endif
  			{
!>				alarm(0);
  				setbuf(termf, tbuf);
  				fprintf(termf, "\n\r\n");
  				warn(termf, sdt, nowtime, f);
  				if (first || sdt - nowtime > 1 MINUTES) {
  					if (*nolog2)
!>						fprintf(termf, "\t...");
!>					for (mess = nolog2; *mess; mess++)
!>						fprintf(termf, " %s", *mess);
  				}
!>				fputc('\r', termf);
!>				fputc('\n', termf);
!>				alarm(5);
  #ifdef DEBUG
!>				fflush(termf);
  #else
!>				fclose(termf);
  #endif
!>				alarm(0);
  			}
  		}
+>		for (hl = hostlist; hl != NULL; hl = hl->nxt) {
+>			rwarn(termf, sdt, nowtime, f, hl->host);
+>			if (first || sdt - nowtime > 1 MINUTES) {
+>				buf[0] = 0;
+>				if (*nolog2) {
+>					strcat(buf, "\t...");
+>					for (mess = nolog2; *mess; mess++) {
+>						strcat(buf, " ");
+>						strcat(buf, *mess);
+>					}
+>					rprintf(hl->host, buf);
+>				}
+>			}
+>		}
  		if (stogo <= 0) {
  	printf("\n\007\007System shutdown time has arrived\007\007\n");
!>			log_entry(sdt);
!>			unlink(nologin);
  			if (!killflg) {
  				printf("but you'll have to do it yourself\n");
  				finish();
  			}
  #ifndef DEBUG
!>			kill(-1, SIGTERM);	/* terminate everyone */
!>			sleep(5);		/* & wait while they die */
!>			if (reboot)
!>				execle(REBOOT, "reboot", 0, 0);
  			if (halt)
!>				execle(HALT, "halt", 0, 0);
!>			kill(1, SIGTERM);	/* sync */
!>			kill(1, SIGTERM);	/* sync */
!>			sleep(20);
  #else
!>			printf("EXTERMINATE EXTERMINATE\n");
  #endif
  			finish();
  		}
!>		stogo = sdt - time((time_t *) 0);
  		if (stogo > 0 && sint > 0)
!>			sleep(sint<stogo ? sint : stogo);
  		stogo -= sint;
  		first = 0;
  	}
***************
*** 311,317 ****
--- 301,307 ----
  		if (t <= 0)
  			t = 5;
  		t *= 60;
!<		tim = time((long *) 0) + t;
  		return(tim);
  	}
  	t = 0;
---------------
  		if (t <= 0)
  			t = 5;
  		t *= 60;
!>		tim = time((time_t *) 0) + t;
  		return(tim);
  	}
  	t = 0;
***************
*** 329,335 ****
--- 319,325 ----
  		goto badform;
  	tim += t; 
  	tim *= 60;
!<	t1 = time((long *) 0);
  	lt = localtime(&t1);
  	t = lt->tm_sec + lt->tm_min*60 + lt->tm_hour*3600;
  	if (tim < t || tim >= (24*3600)) {
---------------
  		goto badform;
  	tim += t; 
  	tim *= 60;
!>	t1 = time((time_t *) 0);
  	lt = localtime(&t1);
  	t = lt->tm_sec + lt->tm_min*60 + lt->tm_hour*3600;
  	if (tim < t || tim >= (24*3600)) {
***************
*** 341,347 ****
--- 331,336 ----
  badform:
  	printf("Bad time format\n");
  	finish();
-<	/*NOTREACHED*/
  }
  
  warn(term, sdt, now, type)
---------------
  }
  
  warn(term, sdt, now, type)
***************
*** 356,364 ****
--- 345,358 ----
---------------
  		while (delay % 5)
  			delay++;
  
+>	if (shutter)
  		fprintf(term,
  	    "\007\007\t*** %sSystem shutdown message from %s@%s ***\r\n\n",
  		    type, shutter, hostname);
+>	else
+>		fprintf(term,
+>		    "\007\007\t*** %sSystem shutdown message (%s) ***\r\n\n",
+>		    type, hostname);
  
  	ts = ctime(&sdt);
  	if (delay > 10 MINUTES)
***************
*** 373,410 ****
--- 367,561 ----
  		fprintf(term, "System going down IMMEDIATELY\r\n");
  }
  
!<doitfast()
  {
!<	FILE *fastd;
  
!<	if ((fastd = fopen(fastboot, "w")) != NULL) {
!<		putc('\n', fastd);
!<		(void) fclose(fastd);
  	}
  }
  
  nolog(sdt)
  	time_t sdt;
  {
  	FILE *nologf;
  
!<	(void) unlink(nologin);			/* in case linked to std file */
  	if ((nologf = fopen(nologin, "w")) != NULL) {
  		fprintf(nologf, nolog1, (ctime(&sdt)) + 11);
!<		if (*nolog2)
!<			fprintf(nologf, "\t%s\n", nolog2 + 1);
!<		(void) fclose(nologf);
  	}
  }
  
  finish()
  {
!<	(void) signal(SIGTERM, SIG_IGN);
!<	(void) unlink(nologin);
  	exit(0);
  }
  
  timeout()
  {
  	longjmp(alarmbuf, 1);
  }
---------------
  		fprintf(term, "System going down IMMEDIATELY\r\n");
  }
  
!>rwarn(term, sdt, now, type, host)
!>	FILE *term;
!>	time_t sdt, now;
!>	char *type;
!>	char *host;
  {
!>	char *ts;
!>	register delay = sdt - now;
!>	char *bufp;
  
!>	if (delay > 8)
!>		while (delay % 5)
!>			delay++;
!>
!>	if (shutter) {
!>		sprintf(buf,
!>	    "\007\007\t*** %sShutdown message for %s from %s@%s ***\r\n\n",
!>		    type, hostname, shutter, hostname);
  	}
+>	else {
+>		sprintf(buf,
+>		    "\007\007\t*** %sShutdown message for %s ***\r\n\n",
+>		    type, hostname);
  	}
+>	ts = ctime(&sdt);
+>	bufp = buf + strlen(buf);
+>	if (delay > 10 MINUTES) {
+>		sprintf(bufp, "%s going down at %5.5s\r\n", hostname, ts+11);
+>	}
+>	else if (delay > 95 SECONDS) {
+>		sprintf(bufp, "%s going down in %d minute%s\r\n",
+>		    hostname, (delay+30)/60, (delay+30)/60 != 1 ? "s" : "");
+>	} else if (delay > 0) {
+>		sprintf(bufp, "%s going down in %d second%s\r\n",
+>		    hostname, delay, delay != 1 ? "s" : "");
+>	} else {
+>		sprintf(bufp, "%s going down IMMEDIATELY\r\n", hostname);
+>	}
+>	rprintf(host, buf);
+>}
  
+>rprintf(host, buf)
+>	char *host, *buf;
+>{
+>	int err;
+>	
+>#ifdef DEBUG
+>		fprintf(stderr, "about to call %s\n", host);
+>#endif
+>	if (err = callrpcfast(host, WALLPROG, WALLVERS, WALLPROC_WALL,
+>	    xdr_path, &buf, xdr_void, NULL)) {
+>#ifdef DEBUG
+>		fprintf(stderr, "couldn't make rpc call ");
+>		clnt_perrno(err);
+>		fprintf(stderr, "\n");
+>#endif
+>	    }
+>}
+>
  nolog(sdt)
  	time_t sdt;
  {
  	FILE *nologf;
+>	register char **mess;
  
!>	unlink(nologin);			/* in case linked to std file */
  	if ((nologf = fopen(nologin, "w")) != NULL) {
  		fprintf(nologf, nolog1, (ctime(&sdt)) + 11);
!>		putc('\t', nologf);
!>		for (mess = nolog2; *mess; mess++)
!>			fprintf(nologf, " %s", *mess);
!>		putc('\n', nologf);
!>		fclose(nologf);
  	}
  }
  
  finish()
  {
!>	signal(SIGTERM, SIG_IGN);
!>	unlink(nologin);
  	exit(0);
  }
  
  timeout()
  {
+>
  	longjmp(alarmbuf, 1);
+>}
+>
+>/*
+> * make an entry in the shutdown log
+> */
+>
+>char *days[] = {
+>	"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"
+>};
+>
+>char *months[] = {
+>	"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep",
+>	"Oct", "Nov", "Dec"
+>};
+>
+>log_entry(now)
+>	time_t now;
+>{
+>	register FILE *fp;
+>	register char **mess;
+>	struct tm *tm, *localtime();
+>
+>	tm = localtime(&now);
+>	fp = fopen(LOGFILE, "a");
+>	if (fp == NULL) {
+>		printf("Shutdown: log entry failed\n");
+>		return;
+>	}
+>	fseek(fp, 0L, 2);
+>	fprintf(fp, "%02d:%02d  %s %s %2d, %4d.  Shutdown:", tm->tm_hour,
+>		tm->tm_min, days[tm->tm_wday], months[tm->tm_mon],
+>		tm->tm_mday, tm->tm_year + 1900);
+>	for (mess = nolog2; *mess; mess++)
+>		fprintf(fp, " %s", *mess);
+>	if (shutter)
+>		fprintf(fp, " (by %s!%s)", hostname, shutter);
+>	fputc('\n', fp);
+>	fclose(fp);
+>}
+>
+>gethostlist()
+>{
+> 	int port, s, err;
+>	char host[256];
+>	struct mountlist *ml;
+>	struct hostlist *hl;
+>	struct sockaddr_in addr;
+>    
+>	/* 
+>	 * check for portmapper
+>	 */
+>	get_myaddress(&addr);
+>	s = socket(AF_INET, SOCK_STREAM, 0);
+>	if (s < 0)
+>		return;
+>	if (connect(s, &addr, sizeof(addr)) < 0)
+>		return;
+>	close(s);
+>
+>	gethostname(host, sizeof(host));
+>	ml = NULL;
+>	if (err = callrpc(host, MOUNTPROG, MOUNTVERS, MOUNTPROC_DUMP,
+>	    xdr_void, 0, xdr_mountlist, &ml)) {
+>		fprintf(stderr, "shutdown: callrpc ");
+>		clnt_perrno(err);
+>		fprintf(stderr, "\n");
+>		return;
+>	}
+>	for (; ml != NULL; ml = ml->ml_nxt) {
+>		for (hl = hostlist; hl != NULL; hl = hl->nxt)
+>			if (strcmp(ml->ml_name, hl->host) == 0)
+>				goto again;
+>		hl = (struct hostlist *)malloc(sizeof(struct hostlist));
+>		hl->host = ml->ml_name;
+>		hl->nxt = hostlist;
+>		hostlist = hl;
+>	   again:;
+>	}
+>}
+>
+>/* 
+> * Don't want to wait for usual portmapper timeout you get with
+> * callrpc or clnt_call, so use rmtcall instead.  Use timeout
+> * of 8 secs, based on the per try timeout of 3 secs for rmtcall 
+> */
+>callrpcfast(host, prognum, versnum, procnum, inproc, in, outproc, out)
+>	char *host;
+>	xdrproc_t inproc, outproc;
+>	char *in, *out;
+>{
+>	struct sockaddr_in server_addr;
+>	struct hostent *hp;
+>	struct timeval timeout;
+>	int port;
+>
+>	if ((hp = gethostbyname(host)) == NULL)
+>		return ((int) RPC_UNKNOWNHOST);
+>	bcopy(hp->h_addr, &server_addr.sin_addr, hp->h_length);
+>	server_addr.sin_family = AF_INET;
+>	server_addr.sin_port =  0;
+>	timeout.tv_sec = 8;
+>	timeout.tv_usec = 0;
+>        pmap_rmtcall(&server_addr, prognum, versnum, procnum,
+>            inproc, in, outproc, out, timeout, &port);
  }
